/*
Code by Alex Chen
Link to his website here: http://venus.cs.qc.cuny.edu/~jchen/
*/

#include <iostream>
using namespace std;

int main() {
      int board[8][8] = {};// Initialize the board to 0
      int r = 0, c = 0;// Start in the 1st row, 1st column
      board[r][c] = 1; // Place the first queen on the upper left corner 

nextCol:
      // Move to the next column
      c += 1;
      // If you passed the last column
      if (c >= 8){
        //goto print
        goto print;
      }
      // Otherwise start at the "TOP" of the column (before the first row)
      else{
        r = -1;
      }

nextRow:
      // Move to the next row
      r += 1;
      // If you have passed the end of the column
      if (r >= 8){
        //goto backtrack
        goto backtrack;
      }
      // If there is a queen in the same row (to the left), goto nextRow
      //for each square to the left of the current square
      for( int i = 1; c - i > -1; i++){
        //if there is a queen on that square
        if(board[r][c-i] == 1){
        //goto nextRow;
        goto nextRow;
        }
      }

      // If there is a queen in the upper-left diagonal, goto nextRow
      for (int i = 1; (c - i > -1) and (r - i > -1); i++){ // End the loop when you are above or left of the chessboard
        //if there is a queen i spots above and left of the current square
        if(board[r - i][c - i] == 1){
          //goto nextRow;
          goto nextRow;          
        }
      }
      // If there is a queen in the lower-left diagonal, goto nextRow
      for (int i = 1; ( c - i > -1 ) and (r + i < 8); i++){ // End the loop when you are below or left of the chessboard
        //if (there is a queen i spots below and left of the current square)
        if( board[r + i][c - i] == 1){
          //goto nextRow;
          goto nextRow;
        }  
      } 

      // Place queen
      board[r][c] = 1;
      // goto nextCol;
      goto nextCol;


backtrack:
      // Move to the previous column
      c -= 1;
      //if (you have moved to the left of the chessboard)
      if (c <= -1){  
        //exit the program
        cout << "finished" << endl;
        return 0;
      }
      // Find the square in the column with a queen in it and set r to the row number of that square
      for( int i = 0; i < 8; i++){
        if (board[i][c] == 1){
          r = i;
        }
      }
      // Remove the queen from the current square
      board[r][c] = 0;
      //goto nextRow;
      goto nextRow;
print:
      static int numSolutions = 0;
      cout << "Solution #" << ++numSolutions << ":\n";
      //Use a nested loop to print the chessboard
      for (int i = 0; i < 8; i++){
        for (int j = 0; j < 8; j++){
          cout << board[i][j] << "   ";
        }
        cout << endl << endl;
      }

      goto backtrack;
}

